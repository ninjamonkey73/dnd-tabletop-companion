declare const presetEntries: {
    readonly defaults: {
        transformIgnorePatterns: string[];
        transform: {
            '^.+\\.(ts|js|mjs|html|svg)$': (string | import("ts-jest").TsJestGlobalOptions)[];
        };
        snapshotSerializers?: string[] | undefined;
        moduleFileExtensions?: string[] | undefined;
        testEnvironment?: string | undefined;
    };
    readonly defaultsESM: {
        extensionsToTreatAsEsm: string[];
        moduleNameMapper: {
            tslib: string;
        };
        transform: {
            '^.+\\.(ts|js|html|svg)$': (string | {
                useESM: boolean;
                tsconfig?: boolean | string | import("ts-jest").RawCompilerOptions | import("ts-jest").TsConfigCompilerOptionsJson;
                isolatedModules?: boolean;
                compiler?: "typescript" | "ttypescript" | string;
                astTransformers?: import("ts-jest").ConfigCustomTransformer;
                diagnostics?: boolean | {
                    pretty?: boolean;
                    ignoreCodes?: number | string | Array<number | string>;
                    exclude?: string[];
                    warnOnly?: boolean;
                };
                babelConfig?: boolean | string | import("ts-jest").BabelConfig;
                stringifyContentPathRegex?: string | RegExp;
            })[];
        };
        transformIgnorePatterns: string[];
        snapshotSerializers?: string[] | undefined;
        moduleFileExtensions?: string[] | undefined;
        testEnvironment?: string | undefined;
    };
    readonly defaultTransformerOptions: import("ts-jest").TsJestGlobalOptions;
    createCjsPreset: (options?: {
        [x: string]: unknown;
    }) => Required<Pick<Partial<{
        automock: boolean;
        bail: boolean | number;
        cache: boolean;
        cacheDirectory: string;
        ci: boolean;
        clearMocks: boolean;
        changedFilesWithAncestor: boolean;
        changedSince: string;
        collectCoverage: boolean;
        collectCoverageFrom: Array<string>;
        coverageDirectory: string;
        coveragePathIgnorePatterns: Array<string>;
        coverageProvider: "babel" | "v8";
        coverageReporters: (keyof import("istanbul-reports").ReportOptions | ["json", Partial<import("istanbul-reports").FileOptions>] | ["text", Partial<import("istanbul-reports").TextOptions>] | ["html", Partial<import("istanbul-reports").HtmlOptions>] | ["clover", Partial<import("istanbul-reports").CloverOptions>] | ["cobertura", Partial<import("istanbul-reports").CoberturaOptions>] | ["html-spa", Partial<import("istanbul-reports").HtmlSpaOptions>] | ["json-summary", Partial<import("istanbul-reports").FileOptions>] | ["lcov", Partial<import("istanbul-reports").LcovOptions>] | ["lcovonly", Partial<import("istanbul-reports").LcovOnlyOptions>] | ["teamcity", Partial<import("istanbul-reports").TeamcityOptions>] | ["text-lcov", Partial<import("istanbul-reports").ProjectOptions>] | ["text-summary", Partial<import("istanbul-reports").FileOptions>])[];
        coverageThreshold: {
            [path: string]: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
            global: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
        };
        dependencyExtractor: string;
        detectLeaks: boolean;
        detectOpenHandles: boolean;
        displayName: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        };
        expand: boolean;
        extensionsToTreatAsEsm: Array<string>;
        fakeTimers: {
            enableGlobally?: boolean;
        } & (({
            advanceTimers?: boolean | number;
            doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
            now?: number | Date;
            timerLimit?: number;
            legacyFakeTimers?: false;
        } & {
            now?: Exclude<number | Date | undefined, Date>;
        }) | {
            legacyFakeTimers?: true;
        });
        filter: string;
        findRelatedTests: boolean;
        forceCoverageMatch: Array<string>;
        forceExit: boolean;
        json: boolean;
        globals: import("jest-runner").Config.ConfigGlobals;
        globalSetup: string | null | undefined;
        globalTeardown: string | null | undefined;
        haste: {
            computeSha1?: boolean;
            defaultPlatform?: string | null;
            forceNodeFilesystemAPI?: boolean;
            enableSymlinks?: boolean;
            hasteImplModulePath?: string;
            platforms?: Array<string>;
            throwOnModuleCollision?: boolean;
            hasteMapModulePath?: string;
            retainAllFiles?: boolean;
        };
        id: string;
        injectGlobals: boolean;
        reporters: Array<string | [string, Record<string, unknown>]>;
        logHeapUsage: boolean;
        lastCommit: boolean;
        listTests: boolean;
        maxConcurrency: number;
        maxWorkers: number | string;
        moduleDirectories: Array<string>;
        moduleFileExtensions: Array<string>;
        moduleNameMapper: {
            [key: string]: string | Array<string>;
        };
        modulePathIgnorePatterns: Array<string>;
        modulePaths: Array<string>;
        noStackTrace: boolean;
        notify: boolean;
        notifyMode: string;
        onlyChanged: boolean;
        onlyFailures: boolean;
        openHandlesTimeout: number;
        outputFile: string;
        passWithNoTests: boolean;
        preset: string | null | undefined;
        prettierPath: string | null | undefined;
        projects: Array<string | {
            filter?: string | undefined;
            rootDir?: string | undefined;
            snapshotSerializers?: string[] | undefined;
            automock?: boolean | undefined;
            cache?: boolean | undefined;
            cacheDirectory?: string | undefined;
            clearMocks?: boolean | undefined;
            collectCoverageFrom?: string[] | undefined;
            coverageDirectory?: string | undefined;
            coveragePathIgnorePatterns?: string[] | undefined;
            dependencyExtractor?: string | undefined;
            detectLeaks?: boolean | undefined;
            detectOpenHandles?: boolean | undefined;
            displayName?: string | {
                name: string;
                color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
            } | undefined;
            extensionsToTreatAsEsm?: string[] | undefined;
            fakeTimers?: ({
                enableGlobally?: boolean;
            } & (({
                advanceTimers?: boolean | number;
                doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
                now?: number | Date;
                timerLimit?: number;
                legacyFakeTimers?: false;
            } & {
                now?: Exclude<number | Date | undefined, Date>;
            }) | {
                legacyFakeTimers?: true;
            })) | undefined;
            forceCoverageMatch?: string[] | undefined;
            globals?: import("jest-runner").Config.ConfigGlobals | undefined;
            globalSetup?: string | null | undefined;
            globalTeardown?: string | null | undefined;
            haste?: {
                computeSha1?: boolean;
                defaultPlatform?: string | null;
                forceNodeFilesystemAPI?: boolean;
                enableSymlinks?: boolean;
                hasteImplModulePath?: string;
                platforms?: Array<string>;
                throwOnModuleCollision?: boolean;
                hasteMapModulePath?: string;
                retainAllFiles?: boolean;
            } | undefined;
            id?: string | undefined;
            injectGlobals?: boolean | undefined;
            moduleDirectories?: string[] | undefined;
            moduleFileExtensions?: string[] | undefined;
            moduleNameMapper?: {
                [key: string]: string | string[];
            } | undefined;
            modulePathIgnorePatterns?: string[] | undefined;
            modulePaths?: string[] | undefined;
            openHandlesTimeout?: number | undefined;
            preset?: string | null | undefined;
            prettierPath?: string | null | undefined;
            resetMocks?: boolean | undefined;
            resetModules?: boolean | undefined;
            resolver?: string | null | undefined;
            restoreMocks?: boolean | undefined;
            roots?: string[] | undefined;
            runner?: string | undefined;
            runtime?: string | undefined;
            sandboxInjectedGlobals?: string[] | undefined;
            setupFiles?: string[] | undefined;
            setupFilesAfterEnv?: string[] | undefined;
            skipFilter?: boolean | undefined;
            skipNodeResolution?: boolean | undefined;
            slowTestThreshold?: number | undefined;
            snapshotResolver?: string | undefined;
            snapshotFormat?: {
                readonly callToJSON?: boolean | undefined;
                readonly compareKeys?: null | undefined;
                readonly escapeRegex?: boolean | undefined;
                readonly escapeString?: boolean | undefined;
                readonly highlight?: boolean | undefined;
                readonly indent?: number | undefined;
                readonly maxDepth?: number | undefined;
                readonly maxWidth?: number | undefined;
                readonly min?: boolean | undefined;
                readonly printBasicPrototype?: boolean | undefined;
                readonly printFunctionName?: boolean | undefined;
                readonly theme?: {
                    readonly comment?: string | undefined;
                    readonly content?: string | undefined;
                    readonly prop?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly value?: string | undefined;
                } | undefined;
            } | undefined;
            errorOnDeprecated?: boolean | undefined;
            testEnvironment?: string | undefined;
            testEnvironmentOptions?: Record<string, unknown> | undefined;
            testLocationInResults?: boolean | undefined;
            testMatch?: string[] | undefined;
            testPathIgnorePatterns?: string[] | undefined;
            testRegex?: string | string[] | undefined;
            testRunner?: string | undefined;
            transform?: {
                [regex: string]: string | [string, Record<string, unknown>];
            } | undefined;
            transformIgnorePatterns?: string[] | undefined;
            watchPathIgnorePatterns?: string[] | undefined;
            unmockedModulePathPatterns?: string[] | undefined;
            workerIdleMemoryLimit?: string | number | undefined;
            cwd?: string | undefined;
        }>;
        randomize: boolean;
        replname: string | null | undefined;
        resetMocks: boolean;
        resetModules: boolean;
        resolver: string | null | undefined;
        restoreMocks: boolean;
        rootDir: string;
        roots: Array<string>;
        runner: string;
        runTestsByPath: boolean;
        runtime: string;
        sandboxInjectedGlobals: Array<string>;
        setupFiles: Array<string>;
        setupFilesAfterEnv: Array<string>;
        showSeed: boolean;
        silent: boolean;
        skipFilter: boolean;
        skipNodeResolution: boolean;
        slowTestThreshold: number;
        snapshotResolver: string;
        snapshotSerializers: Array<string>;
        snapshotFormat: import("@jest/schemas").SnapshotFormat;
        errorOnDeprecated: boolean;
        testEnvironment: string;
        testEnvironmentOptions: Record<string, unknown>;
        testFailureExitCode: string | number;
        testLocationInResults: boolean;
        testMatch: Array<string>;
        testNamePattern: string;
        testPathIgnorePatterns: Array<string>;
        testRegex: string | Array<string>;
        testResultsProcessor: string;
        testRunner: string;
        testSequencer: string;
        testTimeout: number;
        transform: {
            [regex: string]: string | [string, Record<string, unknown>];
        };
        transformIgnorePatterns: Array<string>;
        watchPathIgnorePatterns: Array<string>;
        unmockedModulePathPatterns: Array<string>;
        updateSnapshot: boolean;
        useStderr: boolean;
        verbose?: boolean;
        watch: boolean;
        watchAll: boolean;
        watchman: boolean;
        watchPlugins: Array<string | [string, Record<string, unknown>]>;
        workerIdleMemoryLimit: number | string;
        workerThreads: boolean;
    }>, "snapshotSerializers" | "moduleFileExtensions" | "testEnvironment">> & Required<Pick<Partial<{
        automock: boolean;
        bail: boolean | number;
        cache: boolean;
        cacheDirectory: string;
        ci: boolean;
        clearMocks: boolean;
        changedFilesWithAncestor: boolean;
        changedSince: string;
        collectCoverage: boolean;
        collectCoverageFrom: Array<string>;
        coverageDirectory: string;
        coveragePathIgnorePatterns: Array<string>;
        coverageProvider: "babel" | "v8";
        coverageReporters: (keyof import("istanbul-reports").ReportOptions | ["json", Partial<import("istanbul-reports").FileOptions>] | ["text", Partial<import("istanbul-reports").TextOptions>] | ["html", Partial<import("istanbul-reports").HtmlOptions>] | ["clover", Partial<import("istanbul-reports").CloverOptions>] | ["cobertura", Partial<import("istanbul-reports").CoberturaOptions>] | ["html-spa", Partial<import("istanbul-reports").HtmlSpaOptions>] | ["json-summary", Partial<import("istanbul-reports").FileOptions>] | ["lcov", Partial<import("istanbul-reports").LcovOptions>] | ["lcovonly", Partial<import("istanbul-reports").LcovOnlyOptions>] | ["teamcity", Partial<import("istanbul-reports").TeamcityOptions>] | ["text-lcov", Partial<import("istanbul-reports").ProjectOptions>] | ["text-summary", Partial<import("istanbul-reports").FileOptions>])[];
        coverageThreshold: {
            [path: string]: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
            global: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
        };
        dependencyExtractor: string;
        detectLeaks: boolean;
        detectOpenHandles: boolean;
        displayName: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        };
        expand: boolean;
        extensionsToTreatAsEsm: Array<string>;
        fakeTimers: {
            enableGlobally?: boolean;
        } & (({
            advanceTimers?: boolean | number;
            doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
            now?: number | Date;
            timerLimit?: number;
            legacyFakeTimers?: false;
        } & {
            now?: Exclude<number | Date | undefined, Date>;
        }) | {
            legacyFakeTimers?: true;
        });
        filter: string;
        findRelatedTests: boolean;
        forceCoverageMatch: Array<string>;
        forceExit: boolean;
        json: boolean;
        globals: import("jest-runner").Config.ConfigGlobals;
        globalSetup: string | null | undefined;
        globalTeardown: string | null | undefined;
        haste: {
            computeSha1?: boolean;
            defaultPlatform?: string | null;
            forceNodeFilesystemAPI?: boolean;
            enableSymlinks?: boolean;
            hasteImplModulePath?: string;
            platforms?: Array<string>;
            throwOnModuleCollision?: boolean;
            hasteMapModulePath?: string;
            retainAllFiles?: boolean;
        };
        id: string;
        injectGlobals: boolean;
        reporters: Array<string | [string, Record<string, unknown>]>;
        logHeapUsage: boolean;
        lastCommit: boolean;
        listTests: boolean;
        maxConcurrency: number;
        maxWorkers: number | string;
        moduleDirectories: Array<string>;
        moduleFileExtensions: Array<string>;
        moduleNameMapper: {
            [key: string]: string | Array<string>;
        };
        modulePathIgnorePatterns: Array<string>;
        modulePaths: Array<string>;
        noStackTrace: boolean;
        notify: boolean;
        notifyMode: string;
        onlyChanged: boolean;
        onlyFailures: boolean;
        openHandlesTimeout: number;
        outputFile: string;
        passWithNoTests: boolean;
        preset: string | null | undefined;
        prettierPath: string | null | undefined;
        projects: Array<string | {
            filter?: string | undefined;
            rootDir?: string | undefined;
            snapshotSerializers?: string[] | undefined;
            automock?: boolean | undefined;
            cache?: boolean | undefined;
            cacheDirectory?: string | undefined;
            clearMocks?: boolean | undefined;
            collectCoverageFrom?: string[] | undefined;
            coverageDirectory?: string | undefined;
            coveragePathIgnorePatterns?: string[] | undefined;
            dependencyExtractor?: string | undefined;
            detectLeaks?: boolean | undefined;
            detectOpenHandles?: boolean | undefined;
            displayName?: string | {
                name: string;
                color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
            } | undefined;
            extensionsToTreatAsEsm?: string[] | undefined;
            fakeTimers?: ({
                enableGlobally?: boolean;
            } & (({
                advanceTimers?: boolean | number;
                doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
                now?: number | Date;
                timerLimit?: number;
                legacyFakeTimers?: false;
            } & {
                now?: Exclude<number | Date | undefined, Date>;
            }) | {
                legacyFakeTimers?: true;
            })) | undefined;
            forceCoverageMatch?: string[] | undefined;
            globals?: import("jest-runner").Config.ConfigGlobals | undefined;
            globalSetup?: string | null | undefined;
            globalTeardown?: string | null | undefined;
            haste?: {
                computeSha1?: boolean;
                defaultPlatform?: string | null;
                forceNodeFilesystemAPI?: boolean;
                enableSymlinks?: boolean;
                hasteImplModulePath?: string;
                platforms?: Array<string>;
                throwOnModuleCollision?: boolean;
                hasteMapModulePath?: string;
                retainAllFiles?: boolean;
            } | undefined;
            id?: string | undefined;
            injectGlobals?: boolean | undefined;
            moduleDirectories?: string[] | undefined;
            moduleFileExtensions?: string[] | undefined;
            moduleNameMapper?: {
                [key: string]: string | string[];
            } | undefined;
            modulePathIgnorePatterns?: string[] | undefined;
            modulePaths?: string[] | undefined;
            openHandlesTimeout?: number | undefined;
            preset?: string | null | undefined;
            prettierPath?: string | null | undefined;
            resetMocks?: boolean | undefined;
            resetModules?: boolean | undefined;
            resolver?: string | null | undefined;
            restoreMocks?: boolean | undefined;
            roots?: string[] | undefined;
            runner?: string | undefined;
            runtime?: string | undefined;
            sandboxInjectedGlobals?: string[] | undefined;
            setupFiles?: string[] | undefined;
            setupFilesAfterEnv?: string[] | undefined;
            skipFilter?: boolean | undefined;
            skipNodeResolution?: boolean | undefined;
            slowTestThreshold?: number | undefined;
            snapshotResolver?: string | undefined;
            snapshotFormat?: {
                readonly callToJSON?: boolean | undefined;
                readonly compareKeys?: null | undefined;
                readonly escapeRegex?: boolean | undefined;
                readonly escapeString?: boolean | undefined;
                readonly highlight?: boolean | undefined;
                readonly indent?: number | undefined;
                readonly maxDepth?: number | undefined;
                readonly maxWidth?: number | undefined;
                readonly min?: boolean | undefined;
                readonly printBasicPrototype?: boolean | undefined;
                readonly printFunctionName?: boolean | undefined;
                readonly theme?: {
                    readonly comment?: string | undefined;
                    readonly content?: string | undefined;
                    readonly prop?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly value?: string | undefined;
                } | undefined;
            } | undefined;
            errorOnDeprecated?: boolean | undefined;
            testEnvironment?: string | undefined;
            testEnvironmentOptions?: Record<string, unknown> | undefined;
            testLocationInResults?: boolean | undefined;
            testMatch?: string[] | undefined;
            testPathIgnorePatterns?: string[] | undefined;
            testRegex?: string | string[] | undefined;
            testRunner?: string | undefined;
            transform?: {
                [regex: string]: string | [string, Record<string, unknown>];
            } | undefined;
            transformIgnorePatterns?: string[] | undefined;
            watchPathIgnorePatterns?: string[] | undefined;
            unmockedModulePathPatterns?: string[] | undefined;
            workerIdleMemoryLimit?: string | number | undefined;
            cwd?: string | undefined;
        }>;
        randomize: boolean;
        replname: string | null | undefined;
        resetMocks: boolean;
        resetModules: boolean;
        resolver: string | null | undefined;
        restoreMocks: boolean;
        rootDir: string;
        roots: Array<string>;
        runner: string;
        runTestsByPath: boolean;
        runtime: string;
        sandboxInjectedGlobals: Array<string>;
        setupFiles: Array<string>;
        setupFilesAfterEnv: Array<string>;
        showSeed: boolean;
        silent: boolean;
        skipFilter: boolean;
        skipNodeResolution: boolean;
        slowTestThreshold: number;
        snapshotResolver: string;
        snapshotSerializers: Array<string>;
        snapshotFormat: import("@jest/schemas").SnapshotFormat;
        errorOnDeprecated: boolean;
        testEnvironment: string;
        testEnvironmentOptions: Record<string, unknown>;
        testFailureExitCode: string | number;
        testLocationInResults: boolean;
        testMatch: Array<string>;
        testNamePattern: string;
        testPathIgnorePatterns: Array<string>;
        testRegex: string | Array<string>;
        testResultsProcessor: string;
        testRunner: string;
        testSequencer: string;
        testTimeout: number;
        transform: {
            [regex: string]: string | [string, Record<string, unknown>];
        };
        transformIgnorePatterns: Array<string>;
        watchPathIgnorePatterns: Array<string>;
        unmockedModulePathPatterns: Array<string>;
        updateSnapshot: boolean;
        useStderr: boolean;
        verbose?: boolean;
        watch: boolean;
        watchAll: boolean;
        watchman: boolean;
        watchPlugins: Array<string | [string, Record<string, unknown>]>;
        workerIdleMemoryLimit: number | string;
        workerThreads: boolean;
    }>, "transform" | "transformIgnorePatterns">>;
    createEsmPreset: (options?: {
        [x: string]: unknown;
    }) => Required<Pick<Partial<{
        automock: boolean;
        bail: boolean | number;
        cache: boolean;
        cacheDirectory: string;
        ci: boolean;
        clearMocks: boolean;
        changedFilesWithAncestor: boolean;
        changedSince: string;
        collectCoverage: boolean;
        collectCoverageFrom: Array<string>;
        coverageDirectory: string;
        coveragePathIgnorePatterns: Array<string>;
        coverageProvider: "babel" | "v8";
        coverageReporters: (keyof import("istanbul-reports").ReportOptions | ["json", Partial<import("istanbul-reports").FileOptions>] | ["text", Partial<import("istanbul-reports").TextOptions>] | ["html", Partial<import("istanbul-reports").HtmlOptions>] | ["clover", Partial<import("istanbul-reports").CloverOptions>] | ["cobertura", Partial<import("istanbul-reports").CoberturaOptions>] | ["html-spa", Partial<import("istanbul-reports").HtmlSpaOptions>] | ["json-summary", Partial<import("istanbul-reports").FileOptions>] | ["lcov", Partial<import("istanbul-reports").LcovOptions>] | ["lcovonly", Partial<import("istanbul-reports").LcovOnlyOptions>] | ["teamcity", Partial<import("istanbul-reports").TeamcityOptions>] | ["text-lcov", Partial<import("istanbul-reports").ProjectOptions>] | ["text-summary", Partial<import("istanbul-reports").FileOptions>])[];
        coverageThreshold: {
            [path: string]: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
            global: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
        };
        dependencyExtractor: string;
        detectLeaks: boolean;
        detectOpenHandles: boolean;
        displayName: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        };
        expand: boolean;
        extensionsToTreatAsEsm: Array<string>;
        fakeTimers: {
            enableGlobally?: boolean;
        } & (({
            advanceTimers?: boolean | number;
            doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
            now?: number | Date;
            timerLimit?: number;
            legacyFakeTimers?: false;
        } & {
            now?: Exclude<number | Date | undefined, Date>;
        }) | {
            legacyFakeTimers?: true;
        });
        filter: string;
        findRelatedTests: boolean;
        forceCoverageMatch: Array<string>;
        forceExit: boolean;
        json: boolean;
        globals: import("jest-runner").Config.ConfigGlobals;
        globalSetup: string | null | undefined;
        globalTeardown: string | null | undefined;
        haste: {
            computeSha1?: boolean;
            defaultPlatform?: string | null;
            forceNodeFilesystemAPI?: boolean;
            enableSymlinks?: boolean;
            hasteImplModulePath?: string;
            platforms?: Array<string>;
            throwOnModuleCollision?: boolean;
            hasteMapModulePath?: string;
            retainAllFiles?: boolean;
        };
        id: string;
        injectGlobals: boolean;
        reporters: Array<string | [string, Record<string, unknown>]>;
        logHeapUsage: boolean;
        lastCommit: boolean;
        listTests: boolean;
        maxConcurrency: number;
        maxWorkers: number | string;
        moduleDirectories: Array<string>;
        moduleFileExtensions: Array<string>;
        moduleNameMapper: {
            [key: string]: string | Array<string>;
        };
        modulePathIgnorePatterns: Array<string>;
        modulePaths: Array<string>;
        noStackTrace: boolean;
        notify: boolean;
        notifyMode: string;
        onlyChanged: boolean;
        onlyFailures: boolean;
        openHandlesTimeout: number;
        outputFile: string;
        passWithNoTests: boolean;
        preset: string | null | undefined;
        prettierPath: string | null | undefined;
        projects: Array<string | {
            filter?: string | undefined;
            rootDir?: string | undefined;
            snapshotSerializers?: string[] | undefined;
            automock?: boolean | undefined;
            cache?: boolean | undefined;
            cacheDirectory?: string | undefined;
            clearMocks?: boolean | undefined;
            collectCoverageFrom?: string[] | undefined;
            coverageDirectory?: string | undefined;
            coveragePathIgnorePatterns?: string[] | undefined;
            dependencyExtractor?: string | undefined;
            detectLeaks?: boolean | undefined;
            detectOpenHandles?: boolean | undefined;
            displayName?: string | {
                name: string;
                color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
            } | undefined;
            extensionsToTreatAsEsm?: string[] | undefined;
            fakeTimers?: ({
                enableGlobally?: boolean;
            } & (({
                advanceTimers?: boolean | number;
                doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
                now?: number | Date;
                timerLimit?: number;
                legacyFakeTimers?: false;
            } & {
                now?: Exclude<number | Date | undefined, Date>;
            }) | {
                legacyFakeTimers?: true;
            })) | undefined;
            forceCoverageMatch?: string[] | undefined;
            globals?: import("jest-runner").Config.ConfigGlobals | undefined;
            globalSetup?: string | null | undefined;
            globalTeardown?: string | null | undefined;
            haste?: {
                computeSha1?: boolean;
                defaultPlatform?: string | null;
                forceNodeFilesystemAPI?: boolean;
                enableSymlinks?: boolean;
                hasteImplModulePath?: string;
                platforms?: Array<string>;
                throwOnModuleCollision?: boolean;
                hasteMapModulePath?: string;
                retainAllFiles?: boolean;
            } | undefined;
            id?: string | undefined;
            injectGlobals?: boolean | undefined;
            moduleDirectories?: string[] | undefined;
            moduleFileExtensions?: string[] | undefined;
            moduleNameMapper?: {
                [key: string]: string | string[];
            } | undefined;
            modulePathIgnorePatterns?: string[] | undefined;
            modulePaths?: string[] | undefined;
            openHandlesTimeout?: number | undefined;
            preset?: string | null | undefined;
            prettierPath?: string | null | undefined;
            resetMocks?: boolean | undefined;
            resetModules?: boolean | undefined;
            resolver?: string | null | undefined;
            restoreMocks?: boolean | undefined;
            roots?: string[] | undefined;
            runner?: string | undefined;
            runtime?: string | undefined;
            sandboxInjectedGlobals?: string[] | undefined;
            setupFiles?: string[] | undefined;
            setupFilesAfterEnv?: string[] | undefined;
            skipFilter?: boolean | undefined;
            skipNodeResolution?: boolean | undefined;
            slowTestThreshold?: number | undefined;
            snapshotResolver?: string | undefined;
            snapshotFormat?: {
                readonly callToJSON?: boolean | undefined;
                readonly compareKeys?: null | undefined;
                readonly escapeRegex?: boolean | undefined;
                readonly escapeString?: boolean | undefined;
                readonly highlight?: boolean | undefined;
                readonly indent?: number | undefined;
                readonly maxDepth?: number | undefined;
                readonly maxWidth?: number | undefined;
                readonly min?: boolean | undefined;
                readonly printBasicPrototype?: boolean | undefined;
                readonly printFunctionName?: boolean | undefined;
                readonly theme?: {
                    readonly comment?: string | undefined;
                    readonly content?: string | undefined;
                    readonly prop?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly value?: string | undefined;
                } | undefined;
            } | undefined;
            errorOnDeprecated?: boolean | undefined;
            testEnvironment?: string | undefined;
            testEnvironmentOptions?: Record<string, unknown> | undefined;
            testLocationInResults?: boolean | undefined;
            testMatch?: string[] | undefined;
            testPathIgnorePatterns?: string[] | undefined;
            testRegex?: string | string[] | undefined;
            testRunner?: string | undefined;
            transform?: {
                [regex: string]: string | [string, Record<string, unknown>];
            } | undefined;
            transformIgnorePatterns?: string[] | undefined;
            watchPathIgnorePatterns?: string[] | undefined;
            unmockedModulePathPatterns?: string[] | undefined;
            workerIdleMemoryLimit?: string | number | undefined;
            cwd?: string | undefined;
        }>;
        randomize: boolean;
        replname: string | null | undefined;
        resetMocks: boolean;
        resetModules: boolean;
        resolver: string | null | undefined;
        restoreMocks: boolean;
        rootDir: string;
        roots: Array<string>;
        runner: string;
        runTestsByPath: boolean;
        runtime: string;
        sandboxInjectedGlobals: Array<string>;
        setupFiles: Array<string>;
        setupFilesAfterEnv: Array<string>;
        showSeed: boolean;
        silent: boolean;
        skipFilter: boolean;
        skipNodeResolution: boolean;
        slowTestThreshold: number;
        snapshotResolver: string;
        snapshotSerializers: Array<string>;
        snapshotFormat: import("@jest/schemas").SnapshotFormat;
        errorOnDeprecated: boolean;
        testEnvironment: string;
        testEnvironmentOptions: Record<string, unknown>;
        testFailureExitCode: string | number;
        testLocationInResults: boolean;
        testMatch: Array<string>;
        testNamePattern: string;
        testPathIgnorePatterns: Array<string>;
        testRegex: string | Array<string>;
        testResultsProcessor: string;
        testRunner: string;
        testSequencer: string;
        testTimeout: number;
        transform: {
            [regex: string]: string | [string, Record<string, unknown>];
        };
        transformIgnorePatterns: Array<string>;
        watchPathIgnorePatterns: Array<string>;
        unmockedModulePathPatterns: Array<string>;
        updateSnapshot: boolean;
        useStderr: boolean;
        verbose?: boolean;
        watch: boolean;
        watchAll: boolean;
        watchman: boolean;
        watchPlugins: Array<string | [string, Record<string, unknown>]>;
        workerIdleMemoryLimit: number | string;
        workerThreads: boolean;
    }>, "snapshotSerializers" | "moduleFileExtensions" | "testEnvironment">> & Required<Pick<Partial<{
        automock: boolean;
        bail: boolean | number;
        cache: boolean;
        cacheDirectory: string;
        ci: boolean;
        clearMocks: boolean;
        changedFilesWithAncestor: boolean;
        changedSince: string;
        collectCoverage: boolean;
        collectCoverageFrom: Array<string>;
        coverageDirectory: string;
        coveragePathIgnorePatterns: Array<string>;
        coverageProvider: "babel" | "v8";
        coverageReporters: (keyof import("istanbul-reports").ReportOptions | ["json", Partial<import("istanbul-reports").FileOptions>] | ["text", Partial<import("istanbul-reports").TextOptions>] | ["html", Partial<import("istanbul-reports").HtmlOptions>] | ["clover", Partial<import("istanbul-reports").CloverOptions>] | ["cobertura", Partial<import("istanbul-reports").CoberturaOptions>] | ["html-spa", Partial<import("istanbul-reports").HtmlSpaOptions>] | ["json-summary", Partial<import("istanbul-reports").FileOptions>] | ["lcov", Partial<import("istanbul-reports").LcovOptions>] | ["lcovonly", Partial<import("istanbul-reports").LcovOnlyOptions>] | ["teamcity", Partial<import("istanbul-reports").TeamcityOptions>] | ["text-lcov", Partial<import("istanbul-reports").ProjectOptions>] | ["text-summary", Partial<import("istanbul-reports").FileOptions>])[];
        coverageThreshold: {
            [path: string]: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
            global: {
                branches?: number;
                functions?: number;
                lines?: number;
                statements?: number;
            };
        };
        dependencyExtractor: string;
        detectLeaks: boolean;
        detectOpenHandles: boolean;
        displayName: string | {
            name: string;
            color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
        };
        expand: boolean;
        extensionsToTreatAsEsm: Array<string>;
        fakeTimers: {
            enableGlobally?: boolean;
        } & (({
            advanceTimers?: boolean | number;
            doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
            now?: number | Date;
            timerLimit?: number;
            legacyFakeTimers?: false;
        } & {
            now?: Exclude<number | Date | undefined, Date>;
        }) | {
            legacyFakeTimers?: true;
        });
        filter: string;
        findRelatedTests: boolean;
        forceCoverageMatch: Array<string>;
        forceExit: boolean;
        json: boolean;
        globals: import("jest-runner").Config.ConfigGlobals;
        globalSetup: string | null | undefined;
        globalTeardown: string | null | undefined;
        haste: {
            computeSha1?: boolean;
            defaultPlatform?: string | null;
            forceNodeFilesystemAPI?: boolean;
            enableSymlinks?: boolean;
            hasteImplModulePath?: string;
            platforms?: Array<string>;
            throwOnModuleCollision?: boolean;
            hasteMapModulePath?: string;
            retainAllFiles?: boolean;
        };
        id: string;
        injectGlobals: boolean;
        reporters: Array<string | [string, Record<string, unknown>]>;
        logHeapUsage: boolean;
        lastCommit: boolean;
        listTests: boolean;
        maxConcurrency: number;
        maxWorkers: number | string;
        moduleDirectories: Array<string>;
        moduleFileExtensions: Array<string>;
        moduleNameMapper: {
            [key: string]: string | Array<string>;
        };
        modulePathIgnorePatterns: Array<string>;
        modulePaths: Array<string>;
        noStackTrace: boolean;
        notify: boolean;
        notifyMode: string;
        onlyChanged: boolean;
        onlyFailures: boolean;
        openHandlesTimeout: number;
        outputFile: string;
        passWithNoTests: boolean;
        preset: string | null | undefined;
        prettierPath: string | null | undefined;
        projects: Array<string | {
            filter?: string | undefined;
            rootDir?: string | undefined;
            snapshotSerializers?: string[] | undefined;
            automock?: boolean | undefined;
            cache?: boolean | undefined;
            cacheDirectory?: string | undefined;
            clearMocks?: boolean | undefined;
            collectCoverageFrom?: string[] | undefined;
            coverageDirectory?: string | undefined;
            coveragePathIgnorePatterns?: string[] | undefined;
            dependencyExtractor?: string | undefined;
            detectLeaks?: boolean | undefined;
            detectOpenHandles?: boolean | undefined;
            displayName?: string | {
                name: string;
                color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "blackBright" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright";
            } | undefined;
            extensionsToTreatAsEsm?: string[] | undefined;
            fakeTimers?: ({
                enableGlobally?: boolean;
            } & (({
                advanceTimers?: boolean | number;
                doNotFake?: Array<"Date" | "hrtime" | "nextTick" | "performance" | "queueMicrotask" | "requestAnimationFrame" | "cancelAnimationFrame" | "requestIdleCallback" | "cancelIdleCallback" | "setImmediate" | "clearImmediate" | "setInterval" | "clearInterval" | "setTimeout" | "clearTimeout">;
                now?: number | Date;
                timerLimit?: number;
                legacyFakeTimers?: false;
            } & {
                now?: Exclude<number | Date | undefined, Date>;
            }) | {
                legacyFakeTimers?: true;
            })) | undefined;
            forceCoverageMatch?: string[] | undefined;
            globals?: import("jest-runner").Config.ConfigGlobals | undefined;
            globalSetup?: string | null | undefined;
            globalTeardown?: string | null | undefined;
            haste?: {
                computeSha1?: boolean;
                defaultPlatform?: string | null;
                forceNodeFilesystemAPI?: boolean;
                enableSymlinks?: boolean;
                hasteImplModulePath?: string;
                platforms?: Array<string>;
                throwOnModuleCollision?: boolean;
                hasteMapModulePath?: string;
                retainAllFiles?: boolean;
            } | undefined;
            id?: string | undefined;
            injectGlobals?: boolean | undefined;
            moduleDirectories?: string[] | undefined;
            moduleFileExtensions?: string[] | undefined;
            moduleNameMapper?: {
                [key: string]: string | string[];
            } | undefined;
            modulePathIgnorePatterns?: string[] | undefined;
            modulePaths?: string[] | undefined;
            openHandlesTimeout?: number | undefined;
            preset?: string | null | undefined;
            prettierPath?: string | null | undefined;
            resetMocks?: boolean | undefined;
            resetModules?: boolean | undefined;
            resolver?: string | null | undefined;
            restoreMocks?: boolean | undefined;
            roots?: string[] | undefined;
            runner?: string | undefined;
            runtime?: string | undefined;
            sandboxInjectedGlobals?: string[] | undefined;
            setupFiles?: string[] | undefined;
            setupFilesAfterEnv?: string[] | undefined;
            skipFilter?: boolean | undefined;
            skipNodeResolution?: boolean | undefined;
            slowTestThreshold?: number | undefined;
            snapshotResolver?: string | undefined;
            snapshotFormat?: {
                readonly callToJSON?: boolean | undefined;
                readonly compareKeys?: null | undefined;
                readonly escapeRegex?: boolean | undefined;
                readonly escapeString?: boolean | undefined;
                readonly highlight?: boolean | undefined;
                readonly indent?: number | undefined;
                readonly maxDepth?: number | undefined;
                readonly maxWidth?: number | undefined;
                readonly min?: boolean | undefined;
                readonly printBasicPrototype?: boolean | undefined;
                readonly printFunctionName?: boolean | undefined;
                readonly theme?: {
                    readonly comment?: string | undefined;
                    readonly content?: string | undefined;
                    readonly prop?: string | undefined;
                    readonly tag?: string | undefined;
                    readonly value?: string | undefined;
                } | undefined;
            } | undefined;
            errorOnDeprecated?: boolean | undefined;
            testEnvironment?: string | undefined;
            testEnvironmentOptions?: Record<string, unknown> | undefined;
            testLocationInResults?: boolean | undefined;
            testMatch?: string[] | undefined;
            testPathIgnorePatterns?: string[] | undefined;
            testRegex?: string | string[] | undefined;
            testRunner?: string | undefined;
            transform?: {
                [regex: string]: string | [string, Record<string, unknown>];
            } | undefined;
            transformIgnorePatterns?: string[] | undefined;
            watchPathIgnorePatterns?: string[] | undefined;
            unmockedModulePathPatterns?: string[] | undefined;
            workerIdleMemoryLimit?: string | number | undefined;
            cwd?: string | undefined;
        }>;
        randomize: boolean;
        replname: string | null | undefined;
        resetMocks: boolean;
        resetModules: boolean;
        resolver: string | null | undefined;
        restoreMocks: boolean;
        rootDir: string;
        roots: Array<string>;
        runner: string;
        runTestsByPath: boolean;
        runtime: string;
        sandboxInjectedGlobals: Array<string>;
        setupFiles: Array<string>;
        setupFilesAfterEnv: Array<string>;
        showSeed: boolean;
        silent: boolean;
        skipFilter: boolean;
        skipNodeResolution: boolean;
        slowTestThreshold: number;
        snapshotResolver: string;
        snapshotSerializers: Array<string>;
        snapshotFormat: import("@jest/schemas").SnapshotFormat;
        errorOnDeprecated: boolean;
        testEnvironment: string;
        testEnvironmentOptions: Record<string, unknown>;
        testFailureExitCode: string | number;
        testLocationInResults: boolean;
        testMatch: Array<string>;
        testNamePattern: string;
        testPathIgnorePatterns: Array<string>;
        testRegex: string | Array<string>;
        testResultsProcessor: string;
        testRunner: string;
        testSequencer: string;
        testTimeout: number;
        transform: {
            [regex: string]: string | [string, Record<string, unknown>];
        };
        transformIgnorePatterns: Array<string>;
        watchPathIgnorePatterns: Array<string>;
        unmockedModulePathPatterns: Array<string>;
        updateSnapshot: boolean;
        useStderr: boolean;
        verbose?: boolean;
        watch: boolean;
        watchAll: boolean;
        watchman: boolean;
        watchPlugins: Array<string | [string, Record<string, unknown>]>;
        workerIdleMemoryLimit: number | string;
        workerThreads: boolean;
    }>, "extensionsToTreatAsEsm" | "moduleNameMapper" | "transform" | "transformIgnorePatterns">>;
};
export = presetEntries;
